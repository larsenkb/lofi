   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	system_sleep
  12               	system_sleep:
  13               	.LFB8:
  14               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <avr/sleep.h>
   3:main.c        **** #include <avr/wdt.h>
   4:main.c        **** #include <avr/interrupt.h>
   5:main.c        **** #include "nrf24.h"
   6:main.c        **** 
   7:main.c        **** #undef F_CPU
   8:main.c        **** #define F_CPU 1000000L
   9:main.c        **** 
  10:main.c        **** #include <util/delay.h>
  11:main.c        **** 
  12:main.c        **** 
  13:main.c        **** #define LED_RED   0x01
  14:main.c        **** #define LED_GREEN 0x02
  15:main.c        **** 
  16:main.c        **** /* ------------------------------------------------------------------------- */
  17:main.c        **** uint8_t temp;
  18:main.c        **** uint8_t q = 0;
  19:main.c        **** uint8_t data_array[4];
  20:main.c        **** uint8_t tx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
  21:main.c        **** //uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};
  22:main.c        **** /* ------------------------------------------------------------------------- */
  23:main.c        **** 
  24:main.c        **** //****************************************************************  
  25:main.c        **** // set system into the sleep state 
  26:main.c        **** // system wakes up when wtchdog is timed out
  27:main.c        **** void system_sleep(void)
  28:main.c        **** {
  15               		.loc 1 28 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  29:main.c        **** 
  30:main.c        **** //  cbi(ADCSRA,ADEN);                    // switch Analog to Digitalconverter OFF
  31:main.c        **** 
  32:main.c        ****   set_sleep_mode(SLEEP_MODE_PWR_DOWN); // sleep mode is set here
  21               		.loc 1 32 0
  22 0000 85B7      		in r24,0x35
  23 0002 877E      		andi r24,lo8(-25)
  24 0004 8061      		ori r24,lo8(16)
  25 0006 85BF      		out 0x35,r24
  33:main.c        ****   sleep_enable();
  26               		.loc 1 33 0
  27 0008 85B7      		in r24,0x35
  28 000a 8062      		ori r24,lo8(32)
  29 000c 85BF      		out 0x35,r24
  34:main.c        **** 
  35:main.c        ****   sleep_mode();                        // System sleeps here
  30               		.loc 1 35 0
  31 000e 85B7      		in r24,0x35
  32 0010 8062      		ori r24,lo8(32)
  33 0012 85BF      		out 0x35,r24
  34               	/* #APP */
  35               	 ;  35 "main.c" 1
  36 0014 8895      		sleep
  37               		
  38               	 ;  0 "" 2
  39               	/* #NOAPP */
  40 0016 85B7      		in r24,0x35
  41 0018 8F7D      		andi r24,lo8(-33)
  42 001a 85BF      		out 0x35,r24
  36:main.c        **** 
  37:main.c        ****   sleep_disable();                     // System continues execution here when watchdog timed out 
  43               		.loc 1 37 0
  44 001c 85B7      		in r24,0x35
  45 001e 8F7D      		andi r24,lo8(-33)
  46 0020 85BF      		out 0x35,r24
  47 0022 0895      		ret
  48               		.cfi_endproc
  49               	.LFE8:
  51               	.global	setup_watchdog
  53               	setup_watchdog:
  54               	.LFB9:
  38:main.c        **** //  sbi(ADCSRA,ADEN);                    // switch Analog to Digitalconverter ON
  39:main.c        **** 
  40:main.c        **** }
  41:main.c        **** 
  42:main.c        **** //****************************************************************
  43:main.c        **** // 0=16ms, 1=32ms,2=64ms,3=128ms,4=250ms,5=500ms
  44:main.c        **** // 6=1 sec,7=2 sec, 8=4 sec, 9= 8sec
  45:main.c        **** void setup_watchdog(int ii)
  46:main.c        **** {
  55               		.loc 1 46 0
  56               		.cfi_startproc
  57               	.LVL0:
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 0 */
  61               	.L__stack_usage = 0
  62 0024 9C01      		movw r18,r24
  63 0026 0A97      		sbiw r24,10
  64 0028 04F0      		brlt .L3
  65 002a 29E0      		ldi r18,lo8(9)
  66 002c 30E0      		ldi r19,0
  67               	.L3:
  68               	.LVL1:
  47:main.c        **** 
  48:main.c        **** 	uint8_t bb;
  49:main.c        **** 
  50:main.c        **** 	if (ii > 9 )
  51:main.c        **** 		ii=9;
  52:main.c        **** 	bb=ii & 7;
  69               		.loc 1 52 0
  70 002e 922F      		mov r25,r18
  71 0030 9770      		andi r25,lo8(7)
  72               	.LVL2:
  53:main.c        **** 	if (ii > 7)
  73               		.loc 1 53 0
  74 0032 2830      		cpi r18,8
  75 0034 3105      		cpc r19,__zero_reg__
  76 0036 04F0      		brlt .L4
  54:main.c        **** 		bb |= (1<<5);
  77               		.loc 1 54 0
  78 0038 9062      		ori r25,lo8(32)
  79               	.LVL3:
  80               	.L4:
  55:main.c        **** 	bb |= (1<<WDCE);
  81               		.loc 1 55 0
  82 003a 9061      		ori r25,lo8(16)
  83               	.LVL4:
  56:main.c        **** 
  57:main.c        **** 
  58:main.c        **** 	MCUSR &= ~(1<<WDRF);
  84               		.loc 1 58 0
  85 003c 84B7      		in r24,0x34
  86 003e 877F      		andi r24,lo8(-9)
  87 0040 84BF      		out 0x34,r24
  59:main.c        **** 	// start timed sequence
  60:main.c        **** 	WDTCSR |= (1<<WDCE) | (1<<WDE);
  88               		.loc 1 60 0
  89 0042 81B5      		in r24,0x21
  90 0044 8861      		ori r24,lo8(24)
  91 0046 81BD      		out 0x21,r24
  61:main.c        **** 	// set new watchdog timeout value
  62:main.c        **** 	WDTCSR = bb;
  92               		.loc 1 62 0
  93 0048 91BD      		out 0x21,r25
  63:main.c        **** 	WDTCSR |= _BV(WDIE);
  94               		.loc 1 63 0
  95 004a 81B5      		in r24,0x21
  96 004c 8064      		ori r24,lo8(64)
  97 004e 81BD      		out 0x21,r24
  98 0050 0895      		ret
  99               		.cfi_endproc
 100               	.LFE9:
 102               	.global	__vector_4
 104               	__vector_4:
 105               	.LFB10:
  64:main.c        **** }
  65:main.c        **** 
  66:main.c        **** //This runs each time the watch dog wakes us up from sleep
  67:main.c        **** ISR(WDT_vect)
  68:main.c        **** {
 106               		.loc 1 68 0
 107               		.cfi_startproc
 108 0052 1F92      		push r1
 109               	.LCFI0:
 110               		.cfi_def_cfa_offset 3
 111               		.cfi_offset 1, -2
 112 0054 0F92      		push r0
 113               	.LCFI1:
 114               		.cfi_def_cfa_offset 4
 115               		.cfi_offset 0, -3
 116 0056 0FB6      		in r0,__SREG__
 117 0058 0F92      		push r0
 118 005a 1124      		clr __zero_reg__
 119               	/* prologue: Signal */
 120               	/* frame size = 0 */
 121               	/* stack size = 3 */
 122               	.L__stack_usage = 3
 123               	/* epilogue start */
  69:main.c        **** //  watchdog_counter++;
  70:main.c        **** }
 124               		.loc 1 70 0
 125 005c 0F90      		pop r0
 126 005e 0FBE      		out __SREG__,r0
 127 0060 0F90      		pop r0
 128 0062 1F90      		pop r1
 129 0064 1895      		reti
 130               		.cfi_endproc
 131               	.LFE10:
 133               		.section	.text.startup,"ax",@progbits
 134               	.global	main
 136               	main:
 137               	.LFB11:
  71:main.c        **** 
  72:main.c        **** int main(void)
  73:main.c        **** {
 138               		.loc 1 73 0
 139               		.cfi_startproc
 140               	/* prologue: function */
 141               	/* frame size = 0 */
 142               	/* stack size = 0 */
 143               	.L__stack_usage = 0
  74:main.c        **** 
  75:main.c        **** 
  76:main.c        **** //	setup_watchdog(9);
  77:main.c        **** 
  78:main.c        **** 	/* Perform system initialization */
  79:main.c        **** 
  80:main.c        **** 	/* init hardware pins */
  81:main.c        **** 	nrf24_init();
 144               		.loc 1 81 0
 145 0000 00D0      		rcall nrf24_init
 146               	.LVL5:
  82:main.c        ****     
  83:main.c        **** 	/* Set the device addresses */
  84:main.c        **** //	nrf24_tx_address(tx_address);
  85:main.c        **** //	nrf24_rx_address(rx_address);    
  86:main.c        **** 
  87:main.c        **** 	/* Channel 0x4c , payload length: 4 */
  88:main.c        **** 	nrf24_config(2,4);
 147               		.loc 1 88 0
 148 0002 64E0      		ldi r22,lo8(4)
 149 0004 82E0      		ldi r24,lo8(2)
 150 0006 00D0      		rcall nrf24_config
 151               	.LVL6:
  89:main.c        **** 
  90:main.c        **** 	DDRB |= (LED_RED | LED_GREEN);
 152               		.loc 1 90 0
 153 0008 87B3      		in r24,0x17
 154 000a 8360      		ori r24,lo8(3)
 155 000c 87BB      		out 0x17,r24
  91:main.c        **** 
  92:main.c        ****   /* Enable interrupts */
  93:main.c        **** //	sei();
  94:main.c        **** 
  95:main.c        **** 	while (1) {
  96:main.c        ****   
  97:main.c        **** //		system_sleep();
  98:main.c        **** 
  99:main.c        **** 		/* Fill the data buffer */
 100:main.c        **** 		data_array[0] = 0x00;
 101:main.c        **** 		data_array[1] = 0xAA;
 156               		.loc 1 101 0
 157 000e CAEA      		ldi r28,lo8(-86)
 102:main.c        **** 		data_array[2] = 0x55;
 158               		.loc 1 102 0
 159 0010 D5E5      		ldi r29,lo8(85)
 160               	.L9:
 100:main.c        **** 		data_array[1] = 0xAA;
 161               		.loc 1 100 0
 162 0012 1092 0000 		sts data_array,__zero_reg__
 101:main.c        **** 		data_array[2] = 0x55;
 163               		.loc 1 101 0
 164 0016 C093 0000 		sts data_array+1,r28
 165               		.loc 1 102 0
 166 001a D093 0000 		sts data_array+2,r29
 103:main.c        **** 		data_array[3] = q++;                                    
 167               		.loc 1 103 0
 168 001e 8091 0000 		lds r24,q
 169 0022 91E0      		ldi r25,lo8(1)
 170 0024 980F      		add r25,r24
 171 0026 9093 0000 		sts q,r25
 172 002a 8093 0000 		sts data_array+3,r24
 104:main.c        **** #if 1
 105:main.c        **** 		/* Automatically goes to TX mode */
 106:main.c        **** 		nrf24_send(data_array);        
 173               		.loc 1 106 0
 174 002e 80E0      		ldi r24,lo8(data_array)
 175 0030 90E0      		ldi r25,hi8(data_array)
 176 0032 00D0      		rcall nrf24_send
 177               	.LVL7:
 178               	.L8:
 107:main.c        ****         
 108:main.c        **** 		/* Wait for transmission to end */
 109:main.c        **** 		while(nrf24_isSending());
 179               		.loc 1 109 0 discriminator 1
 180 0034 00D0      		rcall nrf24_isSending
 181               	.LVL8:
 182 0036 8111      		cpse r24,__zero_reg__
 183 0038 00C0      		rjmp .L8
 110:main.c        **** 
 111:main.c        **** 		/* Make analysis on last tranmission attempt */
 112:main.c        **** //		temp = nrf24_lastMessageStatus();
 113:main.c        **** 
 114:main.c        **** 		/* Retranmission count indicates the tranmission quality */
 115:main.c        **** //		temp = nrf24_retransmissionCount();
 116:main.c        **** //		xprintf("> Retranmission count: %d\r\n",temp);
 117:main.c        **** 
 118:main.c        **** 		/* Optionally, go back to RX mode ... */
 119:main.c        **** //		nrf24_powerUpRx();
 120:main.c        **** 
 121:main.c        **** 		/* Or you might want to power down after TX */
 122:main.c        **** 		// nrf24_powerDown();            
 123:main.c        **** #endif
 124:main.c        ****     PORTB |= (LED_GREEN);
 184               		.loc 1 124 0
 185 003a C19A      		sbi 0x18,1
 186               	.LVL9:
 187               	.LBB6:
 188               	.LBB7:
 189               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2453 2014-10-19 08:18:11Z saaadhu $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/avr/include/util/delay.h **** #endif
  41:/usr/avr/include/util/delay.h **** 
  42:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/avr/include/util/delay.h **** #include <math.h>
  45:/usr/avr/include/util/delay.h **** 
  46:/usr/avr/include/util/delay.h **** /** \file */
  47:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/avr/include/util/delay.h ****     \code
  49:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/avr/include/util/delay.h ****     \endcode
  53:/usr/avr/include/util/delay.h **** 
  54:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/avr/include/util/delay.h ****     used.
  58:/usr/avr/include/util/delay.h **** 
  59:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/avr/include/util/delay.h **** 
  68:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/avr/include/util/delay.h **** 
  77:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/avr/include/util/delay.h **** 
  81:/usr/avr/include/util/delay.h **** */
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  85:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  86:/usr/avr/include/util/delay.h **** #endif
  87:/usr/avr/include/util/delay.h **** 
  88:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/avr/include/util/delay.h **** #endif
  93:/usr/avr/include/util/delay.h **** 
  94:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/avr/include/util/delay.h **** #endif
  97:/usr/avr/include/util/delay.h **** 
  98:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/avr/include/util/delay.h **** #endif
 103:/usr/avr/include/util/delay.h **** 
 104:/usr/avr/include/util/delay.h **** /**
 105:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/avr/include/util/delay.h **** 
 107:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/avr/include/util/delay.h **** 
 109:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/avr/include/util/delay.h **** 
 112:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/avr/include/util/delay.h **** 
 114:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/avr/include/util/delay.h **** 
 120:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/avr/include/util/delay.h **** 
 125:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/avr/include/util/delay.h **** 
 132:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/avr/include/util/delay.h **** 
 140:/usr/avr/include/util/delay.h ****  */
 141:/usr/avr/include/util/delay.h **** void
 142:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/avr/include/util/delay.h **** {
 144:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/avr/include/util/delay.h **** 
 155:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/avr/include/util/delay.h **** 
 158:/usr/avr/include/util/delay.h **** 	#else
 159:/usr/avr/include/util/delay.h **** 		//round up by default
 160:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/avr/include/util/delay.h **** 	#endif
 162:/usr/avr/include/util/delay.h **** 
 163:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 190               		.loc 2 163 0
 191 003c 89EF      		ldi r24,lo8(249)
 192 003e 90E0      		ldi r25,hi8(249)
 193 0040 0197      	1:	sbiw r24,1
 194 0042 01F4      		brne 1b
 195 0044 00C0      		rjmp .
 196 0046 0000      		nop
 197               	.LBE7:
 198               	.LBE6:
 125:main.c        ****     _delay_ms(1);
 126:main.c        ****     PORTB &= ~(LED_GREEN);
 199               		.loc 1 126 0
 200 0048 C198      		cbi 0x18,1
 201               	.LVL10:
 202               	.LBB8:
 203               	.LBB9:
 204               		.loc 2 163 0
 205 004a 9FE3      		ldi r25,lo8(199999)
 206 004c 2DE0      		ldi r18,hi8(199999)
 207 004e 83E0      		ldi r24,hlo8(199999)
 208 0050 9150      	1:	subi r25,1
 209 0052 2040      		sbci r18,0
 210 0054 8040      		sbci r24,0
 211 0056 01F4      		brne 1b
 212 0058 00C0      		rjmp .
 213 005a 0000      		nop
 214 005c 00C0      		rjmp .L9
 215               	.LBE9:
 216               	.LBE8:
 217               		.cfi_endproc
 218               	.LFE11:
 220               	.global	tx_address
 221               		.data
 224               	tx_address:
 225 0000 E7        		.byte	-25
 226 0001 E7        		.byte	-25
 227 0002 E7        		.byte	-25
 228 0003 E7        		.byte	-25
 229 0004 E7        		.byte	-25
 230               		.comm	data_array,4,1
 231               	.global	q
 232               		.section .bss
 235               	q:
 236 0000 00        		.zero	1
 237               		.comm	temp,1,1
 238               		.text
 239               	.Letext0:
 240               		.file 3 "/usr/avr/include/stdint.h"
 241               		.file 4 "nrf24.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccsgxbVK.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccsgxbVK.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccsgxbVK.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccsgxbVK.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccsgxbVK.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccsgxbVK.s:12     .text:0000000000000000 system_sleep
     /tmp/ccsgxbVK.s:53     .text:0000000000000024 setup_watchdog
     /tmp/ccsgxbVK.s:104    .text:0000000000000052 __vector_4
     /tmp/ccsgxbVK.s:136    .text.startup:0000000000000000 main
                            *COM*:0000000000000004 data_array
     /tmp/ccsgxbVK.s:235    .bss:0000000000000000 q
     /tmp/ccsgxbVK.s:224    .data:0000000000000000 tx_address
                            *COM*:0000000000000001 temp

UNDEFINED SYMBOLS
nrf24_init
nrf24_config
nrf24_send
nrf24_isSending
__do_copy_data
__do_clear_bss
