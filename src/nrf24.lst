   1               		.file	"nrf24.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	spi_init
  12               	spi_init:
  13               	.LFB0:
  14               		.file 1 "nrf24.c"
   1:nrf24.c       **** #include <avr/io.h>
   2:nrf24.c       **** #include "nrf24.h"
   3:nrf24.c       **** 
   4:nrf24.c       **** #define CE				0		/* PORTA */
   5:nrf24.c       **** #define CSN				1		/* PORTA */
   6:nrf24.c       **** #define SCK				4		/* PORTA */
   7:nrf24.c       **** #define MOSI			6		/* PORTA */
   8:nrf24.c       **** #define MISO			5		/* PORTA */
   9:nrf24.c       **** #define ASSERT_CE()     (PORTA |= (1<<CE))
  10:nrf24.c       **** #define DEASSERT_CE()   (PORTA &= ~(1<<CE))
  11:nrf24.c       **** #define DEASSERT_CSN()  (PORTA |= (1<<CSN))
  12:nrf24.c       **** #define ASSERT_CSN()    (PORTA &= ~(1<<CSN))
  13:nrf24.c       **** 
  14:nrf24.c       **** 
  15:nrf24.c       **** void spi_init(void)
  16:nrf24.c       **** {
  15               		.loc 1 16 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  17:nrf24.c       ****     DDRA |= (1<<CSN);	// OUTPUT
  21               		.loc 1 17 0
  22 0000 D19A      		sbi 0x1a,1
  18:nrf24.c       ****     DDRA |= (1<<SCK);	// OUTPUT
  23               		.loc 1 18 0
  24 0002 D49A      		sbi 0x1a,4
  19:nrf24.c       ****     DDRA |= (1<<MOSI);	// OUTPUT
  25               		.loc 1 19 0
  26 0004 D69A      		sbi 0x1a,6
  20:nrf24.c       ****     DDRA &= ~(1<<MISO);	// INPUT
  27               		.loc 1 20 0
  28 0006 D598      		cbi 0x1a,5
  21:nrf24.c       ****     DDRA |= (1<<CE);	// OUTPUT
  29               		.loc 1 21 0
  30 0008 D09A      		sbi 0x1a,0
  22:nrf24.c       **** 	DEASSERT_CE();
  31               		.loc 1 22 0
  32 000a D898      		cbi 0x1b,0
  23:nrf24.c       **** 	DEASSERT_CSN();
  33               		.loc 1 23 0
  34 000c D99A      		sbi 0x1b,1
  24:nrf24.c       **** 	PORTA &= ~(1<<SCK);
  35               		.loc 1 24 0
  36 000e DC98      		cbi 0x1b,4
  25:nrf24.c       **** 
  26:nrf24.c       **** 	USICR = _BV(USIWM0) | _BV(USICS1) | _BV(USICLK);
  37               		.loc 1 26 0
  38 0010 8AE1      		ldi r24,lo8(26)
  39 0012 8DB9      		out 0xd,r24
  40 0014 0895      		ret
  41               		.cfi_endproc
  42               	.LFE0:
  44               	.global	spi_transfer
  46               	spi_transfer:
  47               	.LFB1:
  27:nrf24.c       **** }
  28:nrf24.c       **** 
  29:nrf24.c       **** #if 0
  30:nrf24.c       **** #if 1
  31:nrf24.c       **** uint8_t spi_transfer(uint8_t _data)
  32:nrf24.c       **** {
  33:nrf24.c       ****   USIDR = _data;
  34:nrf24.c       ****   uint8_t i;
  35:nrf24.c       ****   
  36:nrf24.c       ****   for (i=0; i<16; i++) {
  37:nrf24.c       ****     USICR = _BV(USIWM0) | _BV(USICS1) | _BV(USICLK) | _BV(USITC);
  38:nrf24.c       ****   }
  39:nrf24.c       ****   return USIDR;
  40:nrf24.c       **** }
  41:nrf24.c       **** #else
  42:nrf24.c       **** uint8_t spi_transfer(uint8_t _data)
  43:nrf24.c       **** {
  44:nrf24.c       ****   USIDR = _data;
  45:nrf24.c       ****   USISR = _BV(USIOIF);
  46:nrf24.c       ****   
  47:nrf24.c       ****   while((USISR & _BV(USIOIF)) == 0){
  48:nrf24.c       ****     USICR = _BV(USIWM0) | _BV(USICS1) | _BV(USICLK) | _BV(USITC);
  49:nrf24.c       ****   }
  50:nrf24.c       ****   return USIDR;
  51:nrf24.c       **** }
  52:nrf24.c       **** #endif
  53:nrf24.c       **** #else
  54:nrf24.c       **** /* software spi routine */
  55:nrf24.c       **** uint8_t spi_transfer(uint8_t tx)
  56:nrf24.c       **** {
  48               		.loc 1 56 0
  49               		.cfi_startproc
  50               	.LVL0:
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 0 */
  54               	.L__stack_usage = 0
  57:nrf24.c       ****     uint8_t i = 0;
  58:nrf24.c       ****     uint8_t rx = 0;    
  59:nrf24.c       **** 
  60:nrf24.c       **** 	PORTA &= ~(1<<SCK);
  55               		.loc 1 60 0
  56 0016 DC98      		cbi 0x1b,4
  57 0018 27E0      		ldi r18,lo8(7)
  58 001a 30E0      		ldi r19,0
  58:nrf24.c       **** 
  59               		.loc 1 58 0
  60 001c 90E0      		ldi r25,0
  61:nrf24.c       **** 
  62:nrf24.c       ****     for (i=0; i<8; i++) {
  63:nrf24.c       **** 
  64:nrf24.c       ****         if (tx & (1<<(7-i))) {
  61               		.loc 1 64 0
  62 001e 482F      		mov r20,r24
  63 0020 50E0      		ldi r21,0
  64               	.LVL1:
  65               	.L6:
  66 0022 BA01      		movw r22,r20
  67 0024 022E      		mov r0,r18
  68 0026 00C0      		rjmp 2f
  69               		1:
  70 0028 7595      		asr r23
  71 002a 6795      		ror r22
  72               		2:
  73 002c 0A94      		dec r0
  74 002e 02F4      		brpl 1b
  75 0030 60FF      		sbrs r22,0
  76 0032 00C0      		rjmp .L3
  65:nrf24.c       **** 			PORTA |= (1<<MOSI);
  77               		.loc 1 65 0
  78 0034 DE9A      		sbi 0x1b,6
  79 0036 00C0      		rjmp .L4
  80               	.L3:
  66:nrf24.c       ****         } else {
  67:nrf24.c       **** 			PORTA &= ~(1<<MOSI);
  81               		.loc 1 67 0
  82 0038 DE98      		cbi 0x1b,6
  83               	.L4:
  68:nrf24.c       ****         }
  69:nrf24.c       **** 
  70:nrf24.c       **** 	    PORTA |= (1<<SCK);
  84               		.loc 1 70 0
  85 003a DC9A      		sbi 0x1b,4
  71:nrf24.c       **** 
  72:nrf24.c       ****         rx = rx << 1;
  86               		.loc 1 72 0
  87 003c 990F      		lsl r25
  88               	.LVL2:
  73:nrf24.c       ****         if (PINA & (1<<MISO)) {
  89               		.loc 1 73 0
  90 003e CD99      		sbic 0x19,5
  74:nrf24.c       ****             rx |= 0x01;
  91               		.loc 1 74 0
  92 0040 9160      		ori r25,lo8(1)
  93               	.LVL3:
  94               	.L5:
  75:nrf24.c       ****         }
  76:nrf24.c       **** 
  77:nrf24.c       **** 	    PORTA &= ~(1<<SCK);
  95               		.loc 1 77 0 discriminator 2
  96 0042 DC98      		cbi 0x1b,4
  97               	.LVL4:
  98               	.LVL5:
  99 0044 2150      		subi r18,1
 100 0046 3109      		sbc r19,__zero_reg__
 101 0048 00F4      		brcc .L6
  78:nrf24.c       **** 
  79:nrf24.c       ****     }
  80:nrf24.c       ****     return rx;
  81:nrf24.c       **** }
 102               		.loc 1 81 0
 103 004a 892F      		mov r24,r25
 104 004c 0895      		ret
 105               		.cfi_endproc
 106               	.LFE1:
 108               	.global	nrf24_init
 110               	nrf24_init:
 111               	.LFB2:
  82:nrf24.c       **** #endif
  83:nrf24.c       **** 
  84:nrf24.c       **** 
  85:nrf24.c       **** void nrf24_init(void) 
  86:nrf24.c       **** {
 112               		.loc 1 86 0
 113               		.cfi_startproc
 114               	/* prologue: function */
 115               	/* frame size = 0 */
 116               	/* stack size = 0 */
 117               	.L__stack_usage = 0
 118 004e 0895      		ret
 119               		.cfi_endproc
 120               	.LFE2:
 122               	.global	nrf24_configRegister
 124               	nrf24_configRegister:
 125               	.LFB4:
  87:nrf24.c       **** //    nrf24_setupPins();
  88:nrf24.c       **** //    nrf24_ce_digitalWrite(LOW);
  89:nrf24.c       **** //    nrf24_csn_digitalWrite(HIGH);    
  90:nrf24.c       **** }
  91:nrf24.c       **** 
  92:nrf24.c       **** 
  93:nrf24.c       **** /* configure the module */
  94:nrf24.c       **** void nrf24_config(uint8_t channel, uint8_t pay_length)
  95:nrf24.c       **** {
  96:nrf24.c       ****     /* Use static payload length ... */
  97:nrf24.c       **** //    payload_len = pay_length;
  98:nrf24.c       **** 
  99:nrf24.c       ****     // Set RF channel
 100:nrf24.c       **** //    nrf24_configRegister(RF_CH, channel);
 101:nrf24.c       **** 
 102:nrf24.c       ****     // Set length of incoming payload 
 103:nrf24.c       **** #if 0
 104:nrf24.c       **** 	nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
 105:nrf24.c       ****     nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
 106:nrf24.c       ****     nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
 107:nrf24.c       ****     nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
 108:nrf24.c       ****     nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
 109:nrf24.c       ****     nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
 110:nrf24.c       **** #else
 111:nrf24.c       **** 	nrf24_configRegister(RX_PW_P0, pay_length); // Auto-ACK pipe ...
 112:nrf24.c       ****     nrf24_configRegister(RX_PW_P1, pay_length); // Data payload pipe
 113:nrf24.c       ****     nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
 114:nrf24.c       ****     nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
 115:nrf24.c       ****     nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
 116:nrf24.c       ****     nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
 117:nrf24.c       **** #endif
 118:nrf24.c       **** 
 119:nrf24.c       ****     // 250Kbps, TX gain: 0dbm
 120:nrf24.c       **** //    nrf24_configRegister(RF_SETUP, (2<<RF_DR) | ((0x03)<<RF_PWR));
 121:nrf24.c       **** 
 122:nrf24.c       ****     // CRC enable, 1 byte CRC length
 123:nrf24.c       **** //    nrf24_configRegister(CONFIG, nrf24_CONFIG);
 124:nrf24.c       **** 
 125:nrf24.c       ****     // Auto Acknowledgment
 126:nrf24.c       **** //    nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(
 127:nrf24.c       **** 
 128:nrf24.c       ****     // Enable RX addresses
 129:nrf24.c       **** //    nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0
 130:nrf24.c       **** 
 131:nrf24.c       ****     // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
 132:nrf24.c       ****     nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
 133:nrf24.c       **** 
 134:nrf24.c       ****     // Dynamic length configurations: No dynamic length
 135:nrf24.c       **** //    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DP
 136:nrf24.c       **** 
 137:nrf24.c       ****     // Start listening
 138:nrf24.c       **** //    nrf24_powerUpRx();
 139:nrf24.c       **** }
 140:nrf24.c       **** 
 141:nrf24.c       **** 
 142:nrf24.c       **** /* Clocks only one byte into the given nrf24 register */
 143:nrf24.c       **** void nrf24_configRegister(uint8_t reg, uint8_t value)
 144:nrf24.c       **** {
 126               		.loc 1 144 0
 127               		.cfi_startproc
 128               	.LVL6:
 129               		.loc 1 144 0
 130 0050 CF93      		push r28
 131               	.LCFI0:
 132               		.cfi_def_cfa_offset 3
 133               		.cfi_offset 28, -2
 134 0052 DF93      		push r29
 135               	.LCFI1:
 136               		.cfi_def_cfa_offset 4
 137               		.cfi_offset 29, -3
 138 0054 1F92      		push __zero_reg__
 139               	.LCFI2:
 140               		.cfi_def_cfa_offset 5
 141 0056 CDB7      		in r28,__SP_L__
 142 0058 DEB7      		in r29,__SP_H__
 143               	.LCFI3:
 144               		.cfi_def_cfa_register 28
 145               	/* prologue: function */
 146               	/* frame size = 1 */
 147               	/* stack size = 3 */
 148               	.L__stack_usage = 3
 145:nrf24.c       ****     ASSERT_CSN();
 149               		.loc 1 145 0
 150 005a D998      		cbi 0x1b,1
 146:nrf24.c       ****     spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 151               		.loc 1 146 0
 152 005c 8F71      		andi r24,lo8(31)
 153               	.LVL7:
 154 005e 8062      		ori r24,lo8(32)
 155 0060 6983      		std Y+1,r22
 156 0062 00D0      		rcall spi_transfer
 157               	.LVL8:
 147:nrf24.c       ****     spi_transfer(value);
 158               		.loc 1 147 0
 159 0064 6981      		ldd r22,Y+1
 160 0066 862F      		mov r24,r22
 161 0068 00D0      		rcall spi_transfer
 162               	.LVL9:
 148:nrf24.c       **** 	DEASSERT_CSN();
 163               		.loc 1 148 0
 164 006a D99A      		sbi 0x1b,1
 165               	/* epilogue start */
 149:nrf24.c       **** }
 166               		.loc 1 149 0
 167 006c 0F90      		pop __tmp_reg__
 168 006e DF91      		pop r29
 169 0070 CF91      		pop r28
 170 0072 0895      		ret
 171               		.cfi_endproc
 172               	.LFE4:
 174               	.global	nrf24_config
 176               	nrf24_config:
 177               	.LFB3:
  95:nrf24.c       ****     /* Use static payload length ... */
 178               		.loc 1 95 0
 179               		.cfi_startproc
 180               	.LVL10:
 181 0074 CF93      		push r28
 182               	.LCFI4:
 183               		.cfi_def_cfa_offset 3
 184               		.cfi_offset 28, -2
 185               	/* prologue: function */
 186               	/* frame size = 0 */
 187               	/* stack size = 1 */
 188               	.L__stack_usage = 1
 189 0076 C62F      		mov r28,r22
 111:nrf24.c       ****     nrf24_configRegister(RX_PW_P1, pay_length); // Data payload pipe
 190               		.loc 1 111 0
 191 0078 81E1      		ldi r24,lo8(17)
 192               	.LVL11:
 193 007a 00D0      		rcall nrf24_configRegister
 194               	.LVL12:
 112:nrf24.c       ****     nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
 195               		.loc 1 112 0
 196 007c 6C2F      		mov r22,r28
 197 007e 82E1      		ldi r24,lo8(18)
 198 0080 00D0      		rcall nrf24_configRegister
 199               	.LVL13:
 113:nrf24.c       ****     nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
 200               		.loc 1 113 0
 201 0082 60E0      		ldi r22,0
 202 0084 83E1      		ldi r24,lo8(19)
 203 0086 00D0      		rcall nrf24_configRegister
 204               	.LVL14:
 114:nrf24.c       ****     nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
 205               		.loc 1 114 0
 206 0088 60E0      		ldi r22,0
 207 008a 84E1      		ldi r24,lo8(20)
 208 008c 00D0      		rcall nrf24_configRegister
 209               	.LVL15:
 115:nrf24.c       ****     nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
 210               		.loc 1 115 0
 211 008e 60E0      		ldi r22,0
 212 0090 85E1      		ldi r24,lo8(21)
 213 0092 00D0      		rcall nrf24_configRegister
 214               	.LVL16:
 116:nrf24.c       **** #endif
 215               		.loc 1 116 0
 216 0094 60E0      		ldi r22,0
 217 0096 86E1      		ldi r24,lo8(22)
 218 0098 00D0      		rcall nrf24_configRegister
 219               	.LVL17:
 132:nrf24.c       **** 
 220               		.loc 1 132 0
 221 009a 6FE4      		ldi r22,lo8(79)
 222 009c 84E0      		ldi r24,lo8(4)
 223               	/* epilogue start */
 139:nrf24.c       **** 
 224               		.loc 1 139 0
 225 009e CF91      		pop r28
 226               	.LVL18:
 132:nrf24.c       **** 
 227               		.loc 1 132 0
 228 00a0 00C0      		rjmp nrf24_configRegister
 229               	.LVL19:
 230               		.cfi_endproc
 231               	.LFE3:
 233               	.global	nrf24_powerUpRx
 235               	nrf24_powerUpRx:
 236               	.LFB5:
 150:nrf24.c       **** 
 151:nrf24.c       **** 
 152:nrf24.c       **** void nrf24_powerUpRx()
 153:nrf24.c       **** {     
 237               		.loc 1 153 0
 238               		.cfi_startproc
 239               	/* prologue: function */
 240               	/* frame size = 0 */
 241               	/* stack size = 0 */
 242               	.L__stack_usage = 0
 154:nrf24.c       **** 	ASSERT_CSN();
 243               		.loc 1 154 0
 244 00a2 D998      		cbi 0x1b,1
 155:nrf24.c       ****     spi_transfer(FLUSH_RX);
 245               		.loc 1 155 0
 246 00a4 82EE      		ldi r24,lo8(-30)
 247 00a6 00D0      		rcall spi_transfer
 248               	.LVL20:
 156:nrf24.c       **** 	DEASSERT_CSN();
 249               		.loc 1 156 0
 250 00a8 D99A      		sbi 0x1b,1
 157:nrf24.c       **** 
 158:nrf24.c       ****     nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 251               		.loc 1 158 0
 252 00aa 60E7      		ldi r22,lo8(112)
 253 00ac 87E0      		ldi r24,lo8(7)
 254 00ae 00D0      		rcall nrf24_configRegister
 255               	.LVL21:
 159:nrf24.c       **** 
 160:nrf24.c       ****     DEASSERT_CE();
 256               		.loc 1 160 0
 257 00b0 D898      		cbi 0x1b,0
 161:nrf24.c       ****     nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
 258               		.loc 1 161 0
 259 00b2 6BE0      		ldi r22,lo8(11)
 260 00b4 80E0      		ldi r24,0
 261 00b6 00D0      		rcall nrf24_configRegister
 262               	.LVL22:
 162:nrf24.c       ****     ASSERT_CE();
 263               		.loc 1 162 0
 264 00b8 D89A      		sbi 0x1b,0
 265 00ba 0895      		ret
 266               		.cfi_endproc
 267               	.LFE5:
 269               	.global	nrf24_getStatus
 271               	nrf24_getStatus:
 272               	.LFB8:
 163:nrf24.c       **** }
 164:nrf24.c       **** 
 165:nrf24.c       **** 
 166:nrf24.c       **** // Sends a data package to the default address. Be sure to send the correct
 167:nrf24.c       **** // amount of bytes as configured as payload on the receiver.
 168:nrf24.c       **** void nrf24_send(uint8_t* value, uint8_t pay_length) 
 169:nrf24.c       **** {    
 170:nrf24.c       **** //	int i;
 171:nrf24.c       **** 
 172:nrf24.c       ****     /* Go to Standby-I first */
 173:nrf24.c       **** 	DEASSERT_CE();
 174:nrf24.c       ****      
 175:nrf24.c       ****     /* Set to transmitter mode , Power up if needed */
 176:nrf24.c       ****     nrf24_powerUpTx();
 177:nrf24.c       **** 
 178:nrf24.c       ****     /* Do we really need to flush TX fifo each time ? */
 179:nrf24.c       **** #if 1
 180:nrf24.c       ****         /* Pull down chip select */
 181:nrf24.c       ****     ASSERT_CSN();
 182:nrf24.c       **** 
 183:nrf24.c       ****     /* Write cmd to flush transmit FIFO */
 184:nrf24.c       ****     spi_transfer(FLUSH_TX);     
 185:nrf24.c       **** 
 186:nrf24.c       ****     /* Pull up chip select */
 187:nrf24.c       ****     DEASSERT_CSN();
 188:nrf24.c       **** #endif 
 189:nrf24.c       **** 
 190:nrf24.c       ****     /* Pull down chip select */
 191:nrf24.c       **** 	ASSERT_CSN();
 192:nrf24.c       **** 
 193:nrf24.c       ****     /* Write cmd to write payload */
 194:nrf24.c       ****     spi_transfer(W_TX_PAYLOAD);
 195:nrf24.c       **** 
 196:nrf24.c       ****     /* Write payload */
 197:nrf24.c       ****     nrf24_transmitSync(value, pay_length);   
 198:nrf24.c       **** 
 199:nrf24.c       ****     /* Pull up chip select */
 200:nrf24.c       **** 	DEASSERT_CSN();
 201:nrf24.c       **** 
 202:nrf24.c       ****     /* Start the transmission */
 203:nrf24.c       **** 	ASSERT_CE();
 204:nrf24.c       **** 
 205:nrf24.c       **** //	DEASSERT_CE();
 206:nrf24.c       **** }
 207:nrf24.c       **** 
 208:nrf24.c       **** uint8_t nrf24_isSending()
 209:nrf24.c       **** {
 210:nrf24.c       ****     uint8_t status;
 211:nrf24.c       **** 
 212:nrf24.c       ****     /* read the current status */
 213:nrf24.c       ****     status = nrf24_getStatus();
 214:nrf24.c       ****                 
 215:nrf24.c       ****     /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
 216:nrf24.c       ****     if ((status & ((1 << TX_DS)  | (1 << MAX_RT)))) {        
 217:nrf24.c       ****         return 0; /* false */
 218:nrf24.c       ****     }
 219:nrf24.c       **** 
 220:nrf24.c       ****     return 1; /* true */
 221:nrf24.c       **** 
 222:nrf24.c       **** }
 223:nrf24.c       **** 
 224:nrf24.c       **** uint8_t nrf24_getStatus(void)
 225:nrf24.c       **** {
 273               		.loc 1 225 0
 274               		.cfi_startproc
 275               	/* prologue: function */
 276               	/* frame size = 0 */
 277               	/* stack size = 0 */
 278               	.L__stack_usage = 0
 226:nrf24.c       ****     uint8_t rv;
 227:nrf24.c       **** 	ASSERT_CSN();
 279               		.loc 1 227 0
 280 00bc D998      		cbi 0x1b,1
 228:nrf24.c       ****     rv = spi_transfer(NOP);
 281               		.loc 1 228 0
 282 00be 8FEF      		ldi r24,lo8(-1)
 283 00c0 00D0      		rcall spi_transfer
 284               	.LVL23:
 229:nrf24.c       **** 	DEASSERT_CSN();
 285               		.loc 1 229 0
 286 00c2 D99A      		sbi 0x1b,1
 230:nrf24.c       ****     return rv;
 231:nrf24.c       **** }
 287               		.loc 1 231 0
 288 00c4 0895      		ret
 289               		.cfi_endproc
 290               	.LFE8:
 292               	.global	nrf24_isSending
 294               	nrf24_isSending:
 295               	.LFB7:
 209:nrf24.c       ****     uint8_t status;
 296               		.loc 1 209 0
 297               		.cfi_startproc
 298               	/* prologue: function */
 299               	/* frame size = 0 */
 300               	/* stack size = 0 */
 301               	.L__stack_usage = 0
 213:nrf24.c       ****                 
 302               		.loc 1 213 0
 303 00c6 00D0      		rcall nrf24_getStatus
 304               	.LVL24:
 305 00c8 982F      		mov r25,r24
 306 00ca 9073      		andi r25,lo8(48)
 307 00cc 81E0      		ldi r24,lo8(1)
 308               	.LVL25:
 309 00ce 01F0      		breq .L18
 310 00d0 80E0      		ldi r24,0
 311               	.L18:
 222:nrf24.c       **** 
 312               		.loc 1 222 0
 313 00d2 0895      		ret
 314               		.cfi_endproc
 315               	.LFE7:
 317               	.global	nrf24_powerUpTx
 319               	nrf24_powerUpTx:
 320               	.LFB9:
 232:nrf24.c       **** 
 233:nrf24.c       **** 
 234:nrf24.c       **** void nrf24_powerUpTx(void)
 235:nrf24.c       **** {
 321               		.loc 1 235 0
 322               		.cfi_startproc
 323               	/* prologue: function */
 324               	/* frame size = 0 */
 325               	/* stack size = 0 */
 326               	.L__stack_usage = 0
 236:nrf24.c       ****     nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 327               		.loc 1 236 0
 328 00d4 60E7      		ldi r22,lo8(112)
 329 00d6 87E0      		ldi r24,lo8(7)
 330 00d8 00D0      		rcall nrf24_configRegister
 331               	.LVL26:
 237:nrf24.c       **** 
 238:nrf24.c       ****     nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
 332               		.loc 1 238 0
 333 00da 6AE0      		ldi r22,lo8(10)
 334 00dc 80E0      		ldi r24,0
 335 00de 00C0      		rjmp nrf24_configRegister
 336               	.LVL27:
 337               		.cfi_endproc
 338               	.LFE9:
 340               	.global	nrf24_transmitSync
 342               	nrf24_transmitSync:
 343               	.LFB10:
 239:nrf24.c       **** }
 240:nrf24.c       **** 
 241:nrf24.c       **** 
 242:nrf24.c       **** /* send multiple bytes over SPI */
 243:nrf24.c       **** void nrf24_transmitSync(uint8_t* dataout, uint8_t len)
 244:nrf24.c       **** {
 344               		.loc 1 244 0
 345               		.cfi_startproc
 346               	.LVL28:
 347 00e0 0F93      		push r16
 348               	.LCFI5:
 349               		.cfi_def_cfa_offset 3
 350               		.cfi_offset 16, -2
 351 00e2 1F93      		push r17
 352               	.LCFI6:
 353               		.cfi_def_cfa_offset 4
 354               		.cfi_offset 17, -3
 355 00e4 CF93      		push r28
 356               	.LCFI7:
 357               		.cfi_def_cfa_offset 5
 358               		.cfi_offset 28, -4
 359 00e6 DF93      		push r29
 360               	.LCFI8:
 361               		.cfi_def_cfa_offset 6
 362               		.cfi_offset 29, -5
 363               	/* prologue: function */
 364               	/* frame size = 0 */
 365               	/* stack size = 4 */
 366               	.L__stack_usage = 4
 367               	.LVL29:
 368 00e8 EC01      		movw r28,r24
 369 00ea 8C01      		movw r16,r24
 370 00ec 060F      		add r16,r22
 371 00ee 111D      		adc r17,__zero_reg__
 372               	.LVL30:
 373               	.L24:
 245:nrf24.c       ****     uint8_t i;
 246:nrf24.c       ****     
 247:nrf24.c       ****     for (i=0; i<len; i++) {
 374               		.loc 1 247 0 discriminator 1
 375 00f0 C017      		cp r28,r16
 376 00f2 D107      		cpc r29,r17
 377 00f4 01F0      		breq .L26
 248:nrf24.c       ****         spi_transfer(dataout[i]);
 378               		.loc 1 248 0 discriminator 3
 379 00f6 8991      		ld r24,Y+
 380               	.LVL31:
 381 00f8 00D0      		rcall spi_transfer
 382               	.LVL32:
 383 00fa 00C0      		rjmp .L24
 384               	.L26:
 385               	/* epilogue start */
 249:nrf24.c       ****     }
 250:nrf24.c       **** }
 386               		.loc 1 250 0
 387 00fc DF91      		pop r29
 388 00fe CF91      		pop r28
 389               	.LVL33:
 390 0100 1F91      		pop r17
 391 0102 0F91      		pop r16
 392 0104 0895      		ret
 393               		.cfi_endproc
 394               	.LFE10:
 396               	.global	nrf24_send
 398               	nrf24_send:
 399               	.LFB6:
 169:nrf24.c       **** //	int i;
 400               		.loc 1 169 0
 401               		.cfi_startproc
 402               	.LVL34:
 403 0106 0F93      		push r16
 404               	.LCFI9:
 405               		.cfi_def_cfa_offset 3
 406               		.cfi_offset 16, -2
 407 0108 1F93      		push r17
 408               	.LCFI10:
 409               		.cfi_def_cfa_offset 4
 410               		.cfi_offset 17, -3
 411 010a CF93      		push r28
 412               	.LCFI11:
 413               		.cfi_def_cfa_offset 5
 414               		.cfi_offset 28, -4
 415 010c DF93      		push r29
 416               	.LCFI12:
 417               		.cfi_def_cfa_offset 6
 418               		.cfi_offset 29, -5
 419 010e 1F92      		push __zero_reg__
 420               	.LCFI13:
 421               		.cfi_def_cfa_offset 7
 422 0110 CDB7      		in r28,__SP_L__
 423 0112 DEB7      		in r29,__SP_H__
 424               	.LCFI14:
 425               		.cfi_def_cfa_register 28
 426               	/* prologue: function */
 427               	/* frame size = 1 */
 428               	/* stack size = 5 */
 429               	.L__stack_usage = 5
 430 0114 8C01      		movw r16,r24
 173:nrf24.c       ****      
 431               		.loc 1 173 0
 432 0116 D898      		cbi 0x1b,0
 176:nrf24.c       **** 
 433               		.loc 1 176 0
 434 0118 6983      		std Y+1,r22
 435 011a 00D0      		rcall nrf24_powerUpTx
 436               	.LVL35:
 181:nrf24.c       **** 
 437               		.loc 1 181 0
 438 011c D998      		cbi 0x1b,1
 184:nrf24.c       **** 
 439               		.loc 1 184 0
 440 011e 81EE      		ldi r24,lo8(-31)
 441 0120 00D0      		rcall spi_transfer
 442               	.LVL36:
 187:nrf24.c       **** #endif 
 443               		.loc 1 187 0
 444 0122 D99A      		sbi 0x1b,1
 191:nrf24.c       **** 
 445               		.loc 1 191 0
 446 0124 D998      		cbi 0x1b,1
 194:nrf24.c       **** 
 447               		.loc 1 194 0
 448 0126 80EA      		ldi r24,lo8(-96)
 449 0128 00D0      		rcall spi_transfer
 450               	.LVL37:
 197:nrf24.c       **** 
 451               		.loc 1 197 0
 452 012a 6981      		ldd r22,Y+1
 453 012c C801      		movw r24,r16
 454 012e 00D0      		rcall nrf24_transmitSync
 455               	.LVL38:
 200:nrf24.c       **** 
 456               		.loc 1 200 0
 457 0130 D99A      		sbi 0x1b,1
 203:nrf24.c       **** 
 458               		.loc 1 203 0
 459 0132 D89A      		sbi 0x1b,0
 460               	/* epilogue start */
 206:nrf24.c       **** 
 461               		.loc 1 206 0
 462 0134 0F90      		pop __tmp_reg__
 463 0136 DF91      		pop r29
 464 0138 CF91      		pop r28
 465 013a 1F91      		pop r17
 466 013c 0F91      		pop r16
 467               	.LVL39:
 468 013e 0895      		ret
 469               		.cfi_endproc
 470               	.LFE6:
 472               	.global	nrf24_transferSync
 474               	nrf24_transferSync:
 475               	.LFB12:
 251:nrf24.c       **** 
 252:nrf24.c       **** 
 253:nrf24.c       **** /* Read single register from nrf24 */
 254:nrf24.c       **** void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
 255:nrf24.c       **** {
 256:nrf24.c       ****     ASSERT_CSN();
 257:nrf24.c       ****     spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 258:nrf24.c       ****     nrf24_transferSync(value,value,len);
 259:nrf24.c       ****     DEASSERT_CSN();
 260:nrf24.c       **** }
 261:nrf24.c       **** 
 262:nrf24.c       **** /* send and receive multiple bytes over SPI */
 263:nrf24.c       **** void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
 264:nrf24.c       **** {
 476               		.loc 1 264 0
 477               		.cfi_startproc
 478               	.LVL40:
 479 0140 EF92      		push r14
 480               	.LCFI15:
 481               		.cfi_def_cfa_offset 3
 482               		.cfi_offset 14, -2
 483 0142 FF92      		push r15
 484               	.LCFI16:
 485               		.cfi_def_cfa_offset 4
 486               		.cfi_offset 15, -3
 487 0144 0F93      		push r16
 488               	.LCFI17:
 489               		.cfi_def_cfa_offset 5
 490               		.cfi_offset 16, -4
 491 0146 1F93      		push r17
 492               	.LCFI18:
 493               		.cfi_def_cfa_offset 6
 494               		.cfi_offset 17, -5
 495 0148 CF93      		push r28
 496               	.LCFI19:
 497               		.cfi_def_cfa_offset 7
 498               		.cfi_offset 28, -6
 499 014a DF93      		push r29
 500               	.LCFI20:
 501               		.cfi_def_cfa_offset 8
 502               		.cfi_offset 29, -7
 503               	/* prologue: function */
 504               	/* frame size = 0 */
 505               	/* stack size = 6 */
 506               	.L__stack_usage = 6
 507               	.LVL41:
 508 014c EC01      		movw r28,r24
 509 014e 8B01      		movw r16,r22
 510 0150 7C01      		movw r14,r24
 511 0152 E40E      		add r14,r20
 512 0154 F11C      		adc r15,__zero_reg__
 513               	.LVL42:
 514               	.L29:
 265:nrf24.c       ****     uint8_t i;
 266:nrf24.c       **** 
 267:nrf24.c       ****     for (i=0; i<len; i++) {
 515               		.loc 1 267 0 discriminator 1
 516 0156 CE15      		cp r28,r14
 517 0158 DF05      		cpc r29,r15
 518 015a 01F0      		breq .L31
 268:nrf24.c       ****         datain[i] = spi_transfer(dataout[i]);
 519               		.loc 1 268 0 discriminator 3
 520 015c 8991      		ld r24,Y+
 521               	.LVL43:
 522 015e 00D0      		rcall spi_transfer
 523               	.LVL44:
 524 0160 F801      		movw r30,r16
 525 0162 8193      		st Z+,r24
 526 0164 8F01      		movw r16,r30
 527               	.LVL45:
 528 0166 00C0      		rjmp .L29
 529               	.L31:
 530               	/* epilogue start */
 269:nrf24.c       ****     }
 270:nrf24.c       **** }
 531               		.loc 1 270 0
 532 0168 DF91      		pop r29
 533 016a CF91      		pop r28
 534               	.LVL46:
 535 016c 1F91      		pop r17
 536 016e 0F91      		pop r16
 537 0170 FF90      		pop r15
 538 0172 EF90      		pop r14
 539 0174 0895      		ret
 540               		.cfi_endproc
 541               	.LFE12:
 543               	.global	nrf24_readRegister
 545               	nrf24_readRegister:
 546               	.LFB11:
 255:nrf24.c       ****     ASSERT_CSN();
 547               		.loc 1 255 0
 548               		.cfi_startproc
 549               	.LVL47:
 550 0176 0F93      		push r16
 551               	.LCFI21:
 552               		.cfi_def_cfa_offset 3
 553               		.cfi_offset 16, -2
 554 0178 1F93      		push r17
 555               	.LCFI22:
 556               		.cfi_def_cfa_offset 4
 557               		.cfi_offset 17, -3
 558 017a CF93      		push r28
 559               	.LCFI23:
 560               		.cfi_def_cfa_offset 5
 561               		.cfi_offset 28, -4
 562 017c DF93      		push r29
 563               	.LCFI24:
 564               		.cfi_def_cfa_offset 6
 565               		.cfi_offset 29, -5
 566 017e 1F92      		push __zero_reg__
 567               	.LCFI25:
 568               		.cfi_def_cfa_offset 7
 569 0180 CDB7      		in r28,__SP_L__
 570 0182 DEB7      		in r29,__SP_H__
 571               	.LCFI26:
 572               		.cfi_def_cfa_register 28
 573               	/* prologue: function */
 574               	/* frame size = 1 */
 575               	/* stack size = 5 */
 576               	.L__stack_usage = 5
 577 0184 8B01      		movw r16,r22
 256:nrf24.c       ****     spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 578               		.loc 1 256 0
 579 0186 D998      		cbi 0x1b,1
 257:nrf24.c       ****     nrf24_transferSync(value,value,len);
 580               		.loc 1 257 0
 581 0188 8F71      		andi r24,lo8(31)
 582               	.LVL48:
 583 018a 4983      		std Y+1,r20
 584 018c 00D0      		rcall spi_transfer
 585               	.LVL49:
 258:nrf24.c       ****     DEASSERT_CSN();
 586               		.loc 1 258 0
 587 018e 4981      		ldd r20,Y+1
 588 0190 B801      		movw r22,r16
 589 0192 C801      		movw r24,r16
 590 0194 00D0      		rcall nrf24_transferSync
 591               	.LVL50:
 259:nrf24.c       **** }
 592               		.loc 1 259 0
 593 0196 D99A      		sbi 0x1b,1
 594               	/* epilogue start */
 260:nrf24.c       **** 
 595               		.loc 1 260 0
 596 0198 0F90      		pop __tmp_reg__
 597 019a DF91      		pop r29
 598 019c CF91      		pop r28
 599 019e 1F91      		pop r17
 600 01a0 0F91      		pop r16
 601               	.LVL51:
 602 01a2 0895      		ret
 603               		.cfi_endproc
 604               	.LFE11:
 606               	.Letext0:
 607               		.file 2 "/usr/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrf24.c
     /tmp/cc3PasA9.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc3PasA9.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc3PasA9.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc3PasA9.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc3PasA9.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc3PasA9.s:12     .text:0000000000000000 spi_init
     /tmp/cc3PasA9.s:46     .text:0000000000000016 spi_transfer
     /tmp/cc3PasA9.s:110    .text:000000000000004e nrf24_init
     /tmp/cc3PasA9.s:124    .text:0000000000000050 nrf24_configRegister
     /tmp/cc3PasA9.s:176    .text:0000000000000074 nrf24_config
     /tmp/cc3PasA9.s:235    .text:00000000000000a2 nrf24_powerUpRx
     /tmp/cc3PasA9.s:271    .text:00000000000000bc nrf24_getStatus
     /tmp/cc3PasA9.s:294    .text:00000000000000c6 nrf24_isSending
     /tmp/cc3PasA9.s:319    .text:00000000000000d4 nrf24_powerUpTx
     /tmp/cc3PasA9.s:342    .text:00000000000000e0 nrf24_transmitSync
     /tmp/cc3PasA9.s:398    .text:0000000000000106 nrf24_send
     /tmp/cc3PasA9.s:474    .text:0000000000000140 nrf24_transferSync
     /tmp/cc3PasA9.s:545    .text:0000000000000176 nrf24_readRegister

NO UNDEFINED SYMBOLS
